// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                     String       @id @default(cuid())
  name                   String?
  email                  String?      @unique
  firstName              String?
  lastName               String?
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime     @default(now()) @map(name: "created_at")
  updatedAt              DateTime     @default(now()) @map(name: "updated_at")
  files                  File[]       @relation("files")
  accounts               Account[]
  sessions               Session[]
  favoriting             Favorite[]   @relation("Favoriting")
  favoriter              Favorite[]   @relation("FavoritedBy")
  stripeCustomerId       String?      @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?      @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?      @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?    @map(name: "stripe_current_period_end")
  TeamMember             TeamMember[]
  apiKeys                APIKey[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model File {
  id          String          @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  size        String
  userId      String
  visiblity   Visibility      @default(PRIVATE)
  viewers     Email[]         @relation("FileViewers")
  waitlists   WaitlistEmail[] @relation("FileWaitlists")
  logs        Logs[]          @relation("FileLog")
  feedbacks   Feedbacks[]     @relation("FileFeedback")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @default(now()) @map(name: "updated_at")
  user        User            @relation("files", fields: [userId], references: [id], onDelete: Cascade)
  teamMember  TeamMember?     @relation("TeamFileMember")
  TeamFiles   TeamFiles[]
  pin         Pin?            @relation("FilePin")
  pinned      Boolean?        @default(false)
  downloads   Int             @default(1)
  folderId    String?
  folder      Folder?         @relation("folders", fields: [folderId], references: [id], onDelete: Cascade)
}

model Favorite {
  id           String @id @default(cuid())
  favoritingId String
  favoriterId  String
  fileId       String

  favoriting User @relation("FavoritedBy", fields: [favoritingId], references: [id], onDelete: Cascade)
  favoriter  User @relation("Favoriting", fields: [favoriterId], references: [id], onDelete: Cascade)

  @@index([favoriterId])
  @@index([favoritingId])
}

enum Visibility {
  PRIVATE
  PUBLIC
  EMAIL
}

enum teamType {
  FREE
  PRO
  ENTERPRISE
}

enum Status {
  DENIED
  GRANTED
  REQUESTED
}

model Email {
  id        String   @id @default(cuid())
  email     String
  fileId    String
  files     File     @relation("FileViewers", fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([email, fileId])
}

model WaitlistEmail {
  id        String   @id @default(cuid())
  email     String
  fileId    String
  files     File     @relation("FileWaitlists", fields: [fileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@unique([email, fileId])
}

model WaitlistsForRelease {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Team {
  id             String           @id @default(cuid())
  slug           String
  name           String
  type           teamType         @default(FREE)
  description    String?
  image          String?
  createdAt      DateTime         @default(now()) @map(name: "created_at")
  updatedAt      DateTime         @default(now()) @map(name: "updated_at")
  teamMembers    TeamMember[]     @relation("TeamMemberLists")
  teamFiles      TeamFiles[]
  TeamInvitation TeamInvitation[]
}

model TeamMember {
  id             String           @id @default(cuid())
  userId         String?
  email          String
  name           String?
  teamId         String
  fileId         String?          @unique
  accepted       Boolean          @default(false)
  role           String?
  createdAt      DateTime         @default(now()) @map(name: "created_at")
  updatedAt      DateTime         @default(now()) @map(name: "updated_at")
  team           Team             @relation("TeamMemberLists", fields: [teamId], references: [id], onDelete: Cascade)
  file           File?            @relation("TeamFileMember", fields: [fileId], references: [id], onDelete: Cascade)
  user           User?            @relation(fields: [userId], references: [id])
  TeamInvitation TeamInvitation[]
}

model TeamInvitation {
  id           String      @id @default(cuid())
  email        String
  teamId       String
  token        String
  status       String?
  userId       String?
  teamMemberId String?
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  updatedAt    DateTime    @default(now()) @map(name: "updated_at")
  team         Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamMember   TeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
}

model TeamFiles {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  teamId    String
  fileId    String
  team      Team     @relation(fields: [teamId], references: [id])
  file      File     @relation(fields: [fileId], references: [id])

  @@index([teamId])
  @@index([fileId])
}

// API KEY 

model APIKey {
  id          String  @id @default(cuid())
  key         String  @unique
  name        String?
  description String?
  website     String
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
}

model Logs {
  id             String   @id @default(cuid())
  fileId         String
  description    String?
  email          String?
  status         Status?  @default(GRANTED)
  originLocation String?
  originIp       String?
  userAgent      String?
  responseTime   String?
  files          File     @relation("FileLog", fields: [fileId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @map(name: "updated_at")
}

model Pin {
  id     String @id @default(cuid())
  files  File   @relation("FilePin", fields: [fileId], references: [id])
  fileId String @unique

  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Feedbacks {
  id          String   @id @default(cuid())
  fileId      String
  name        String?
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  files       File     @relation("FileFeedback", fields: [fileId], references: [id], onDelete: Cascade)
}

model Folder {
  id         String   @id @default(cuid())
  fileId     String
  name       String
  descripton String
  file       File[]   @relation("folders")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
}
